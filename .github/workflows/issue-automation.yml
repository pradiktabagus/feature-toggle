name: Issue Automation

on:
  issues:
    types: [opened]

jobs:
  process-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Process new issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body || '';
            
            console.log(`Processing issue #${issue.number}: ${issue.title}`);
            console.log('Issue body length:', body.length);
            
            const labelsToAdd = [];
            
            // Extract phase from issue body
            const phaseMatch = body.match(/\*\*Phase:\*\*\s*(Phase\s*[2-5])/i);
            if (phaseMatch) {
              const phase = phaseMatch[1].toLowerCase().replace(/\s+/g, '-');
              labelsToAdd.push(phase);
              console.log('Found phase:', phase);
            }
            
            // Extract priority from issue body  
            const priorityMatch = body.match(/\*\*Priority:\*\*\s*(High|Medium|Low)/i);
            if (priorityMatch) {
              const priority = `priority-${priorityMatch[1].toLowerCase()}`;
              labelsToAdd.push(priority);
              console.log('Found priority:', priority);
            }
            
            // Add labels if any found
            if (labelsToAdd.length > 0) {
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: labelsToAdd
                });
                console.log('Successfully added labels:', labelsToAdd);
              } catch (error) {
                console.log('Error adding labels:', error.message);
                // Check if labels exist
                for (const label of labelsToAdd) {
                  try {
                    await github.rest.issues.getLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      name: label
                    });
                  } catch (labelError) {
                    console.log(`Label "${label}" does not exist, creating it...`);
                    try {
                      await github.rest.issues.createLabel({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        name: label,
                        color: label.startsWith('phase-') ? 'FEF08A' : 'EF4444',
                        description: `Auto-generated label for ${label}`
                      });
                      console.log(`Created label: ${label}`);
                    } catch (createError) {
                      console.log(`Failed to create label "${label}":`, createError.message);
                    }
                  }
                }
                // Retry adding labels
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    labels: labelsToAdd
                  });
                  console.log('Successfully added labels on retry:', labelsToAdd);
                } catch (retryError) {
                  console.log('Failed to add labels on retry:', retryError.message);
                }
              }
            }
            
            // Add project board comment
            const projectUrl = 'https://github.com/users/pradiktabagus/projects/5';
            const message = `ðŸš€ This issue has been created! Please add it to the [project board](${projectUrl}) manually.
            
**Auto-detected:**
${labelsToAdd.length > 0 ? `- Labels: ${labelsToAdd.join(', ')}` : '- No labels detected'}

**Next steps:**
1. Add to project board
2. Move to appropriate column (Todo/In Progress)
3. Assign to milestone if applicable`;
            
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: message
              });
              console.log('Successfully added project comment');
            } catch (error) {
              console.log('Error adding comment:', error.message);
            }